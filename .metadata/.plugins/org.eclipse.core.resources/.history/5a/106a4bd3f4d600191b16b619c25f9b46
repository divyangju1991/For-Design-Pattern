package practice.UnrolledlinkedList;

import java.io.Serializable;
import java.util.AbstractList;
import java.util.ConcurrentModificationException;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;

public class UnrolledLinkedList<E> extends AbstractList<E> implements List<E> {

	@Override
	public E get(int index) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int size() {
		// TODO Auto-generated method stub
		return 0;
	}
	
	private int nodeCapacity;
	
	private int size = 0;
	
	private int modCount = 0;
	
	private ListNode firstNode;
	
	private ListNode lastNode;
	
	
	public int getSize() {
		return size;
	}
	
	public UnrolledLinkedList(int nodeCapacity) throws IllegalArgumentException {
		if(nodeCapacity < 8) {
			throw new IllegalArgumentException("nodeCapacity < 8");
		}
	}
	
	public UnrolledLinkedList(){
		this(16);
	}
	
	
	
	private class ListNode {
		
		private int index;
		
		private ListNode next;
		
		private ListNode previous;
		
	}
	
	
}