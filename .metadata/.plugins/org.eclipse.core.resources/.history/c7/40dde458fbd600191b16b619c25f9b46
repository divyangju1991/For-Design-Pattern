package practice.UnrolledlinkedList;

import java.io.Serializable;
import java.util.AbstractList;
import java.util.ConcurrentModificationException;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;

public class UnrolledLinkedList<E> extends AbstractList<E> implements List<E> {

	@Override
	public E get(int index) {
		// TODO Auto-generated method stub
		return null;
	}

    private int nodeCapacity;
    
    private int size;
    
    private ListNode firstNode;
    
    private ListNode lastNode;
    
    
    public UnrolledLinkedList(int nodeCapacity) throws IllegalAccessException {
    	if(nodeCapacity < 8) {
    		throw new IllegalAccessException("nodeCapacity < 8");
    	}
    }
	
    public UnrolledLinkedList() throws IllegalAccessException{
    	this(16);
    }
    
    @Override
	public int size() {
		return size;
	}
    
    public boolean isEmpty(){
        return size > 0;	
    }
    
    public boolean contains(Object o) {
    	return indexOf(o) != -1;
    }
    
    private class ListNode {
    	
    	int numElements;
    	
    	ListNode next;
    	
    	ListNode previous;
    	
    	Object[] elements;
    	
    	ListNode() {
    		elements = new Object[nodeCapacity];
    	}
    }
    
    private class ULListIterator implements ListIterator<E> {
    	
    	ListNode currrentNode;
    	int ptr;
    	int index;
    	
    	public ULListIterator(ListNode node, int ptr, int index) {
		  
		}
    }
    
    
}