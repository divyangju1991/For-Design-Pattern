package practice.UnrolledlinkedList;

import java.io.Serializable;
import java.util.AbstractList;
import java.util.ConcurrentModificationException;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;

public class UnrolledLinkedList<E> extends AbstractList<E> implements List<E> {

	@Override
	public E get(int index) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int size() {
		// TODO Auto-generated method stub
		return 0;
	}
	
    private int nodeCapacity;
    
    private ListNode firstNode;
    
    private ListNode lastNode;
    
    
    public UnrolledLinkedList(int nodeCapacity) throws IllegalAccessException {
    	if(nodeCapacity < 8) {
    		throw new IllegalAccessException("nodeCapacity < 8");
    	}
    }
	
}